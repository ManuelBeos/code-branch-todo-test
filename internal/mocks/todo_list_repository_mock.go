// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/manuelbeos/code-branch-todo-test/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TodoListRepository is an autogenerated mock type for the TodoListRepository type
type TodoListRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *TodoListRepository) CreateTask(_a0 context.Context, _a1 entity.Task) (*entity.Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Task) (*entity.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Task) *entity.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: _a0, _a1
func (_m *TodoListRepository) DeleteTask(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: _a0
func (_m *TodoListRepository) GetAllTasks(_a0 context.Context) ([]*entity.Task, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []*entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Task, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: _a0, _a1
func (_m *TodoListRepository) GetTaskByID(_a0 context.Context, _a1 uuid.UUID) (*entity.Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: _a0, _a1
func (_m *TodoListRepository) UpdateTask(_a0 context.Context, _a1 *entity.Task) (*entity.Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) (*entity.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) *entity.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoListRepository creates a new instance of TodoListRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoListRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoListRepository {
	mock := &TodoListRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
